/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

package com.example.analyticsservice.swagger.server.api;

import java.time.*;
import java.util.*;

import jakarta.servlet.http.*;
import javax.validation.*;
import javax.validation.constraints.*;

import org.slf4j.*;

import com.fasterxml.jackson.databind.*;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.security.*;
import org.springframework.http.*;
import org.springframework.validation.annotation.*;
import org.springframework.web.bind.annotation.*;

import com.example.analyticsservice.swagger.server.dto.*;

@Validated
public interface ExportStatisticsApi {

    Logger log = LoggerFactory.getLogger(ExportStatisticsApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    @Operation(summary = "Выгрузить отчёт в формате excel", description = "Запрос на выгрузку отчёта", security = {
        @SecurityRequirement(name = "BearerAuth")}, tags = {"Analytics"})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Статистика получена и сохранена на файл", content = @Content(mediaType = "text/csv", schema = @Schema(implementation = String.class))),

        @ApiResponse(responseCode = "400", description = "Данные не валидны", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))),

        @ApiResponse(responseCode = "404", description = "Отчёт не найден", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))),

        @ApiResponse(responseCode = "403", description = "У пользователя нет доступа", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))),

        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))),

        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class)))})
    @RequestMapping(value = "/export-statistics",
        produces = {"text/csv", "application/json"},
        method = RequestMethod.GET)
    ResponseEntity<String> getCsvReport(
        @NotNull @Parameter(in = ParameterIn.QUERY, description = "Валюта за который собирается аналитика", required = true, schema = @Schema()) @Valid @RequestParam(value = "currency", required = true) String currency
        ,
        @Parameter(in = ParameterIn.QUERY, description = "Период за который собирается аналитика", schema = @Schema(allowableValues = {"Месяц", "Квартал", "Год"}
        )) @Valid @RequestParam(value = "period", required = false) String period
        ,
        @Parameter(in = ParameterIn.QUERY, description = "Начальная дата для произвольного периода", schema = @Schema()) @Valid @RequestParam(value = "startDate", required = false) LocalDate startDate
        ,
        @Parameter(in = ParameterIn.QUERY, description = "Конечная дата для произвольного периода", schema = @Schema()) @Valid @RequestParam(value = "endDate", required = false) LocalDate endDate
        ,
        @Parameter(in = ParameterIn.QUERY, description = "Город за который собирается аналитика", schema = @Schema()) @Valid @RequestParam(value = "city", required = false) String city
    );

}

